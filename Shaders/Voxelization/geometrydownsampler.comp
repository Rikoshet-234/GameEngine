#version 450 core

#define POSX 0
#define NEGX 1
#define POSY 2
#define NEGY 3
#define POSZ 4
#define NEGZ 5

#define MAX_CLIPMAP 10

layout(set = 0, binding = 0, std140) uniform CubeVoxelizationInfo {
    uint clipMapNumber;
    uint voxelGridResolution;
    uint p1, p2;
    vec4 cubeCenterDiagonal[MAX_CLIPMAP]; // xyz center, w diagonal length
};

layout(set = 0, binding = 1) uniform sampler3D src;
layout(set = 0, binding = 2, r8) writeonly uniform image3D dst;

layout(push_constant) uniform PUSH_CONSTANT {
    int indexClipMap;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

float integrateOpacityInDir(in const float front, in const float back) {
    return (front + back) - front * back;
}

float computeDownSampledValue(in const ivec3 srcPos, in const uint dir) {
    /*
        Front : 2 3     Back : 6 7
                0 1            4 5
    */
    const ivec3 p[8] = ivec3[8](
        (ivec3(srcPos) + ivec3(0, 0, 0)),
        (ivec3(srcPos) + ivec3(1, 0, 0)),
        (ivec3(srcPos) + ivec3(0, 1, 0)),
        (ivec3(srcPos) + ivec3(1, 1, 0)),
        (ivec3(srcPos) + ivec3(0, 0, 1)),
        (ivec3(srcPos) + ivec3(1, 0, 1)),
        (ivec3(srcPos) + ivec3(0, 1, 1)),
        (ivec3(srcPos) + ivec3(1, 1, 1))
    );

    float opacities[8];

    for(int i = 0; i < 8; ++i)
        opacities[i] = texelFetch(src, p[i], 0).x;

    float value = 0.0;

    // X
    if(dir == 0) {
        value += integrateOpacityInDir(opacities[0], opacities[1]);
        value += integrateOpacityInDir(opacities[2], opacities[3]);
        value += integrateOpacityInDir(opacities[4], opacities[5]);
        value += integrateOpacityInDir(opacities[6], opacities[7]);
    }

    // Y
    else if(dir == 1) {
        value += integrateOpacityInDir(opacities[0], opacities[2]);
        value += integrateOpacityInDir(opacities[1], opacities[3]);
        value += integrateOpacityInDir(opacities[4], opacities[6]);
        value += integrateOpacityInDir(opacities[5], opacities[7]);
    }

    // Z
    else {
        value += integrateOpacityInDir(opacities[2], opacities[6]);
        value += integrateOpacityInDir(opacities[3], opacities[7]);
        value += integrateOpacityInDir(opacities[0], opacities[4]);
        value += integrateOpacityInDir(opacities[1], opacities[5]);
    }
    return value * 0.25;
}

ivec3 left(in const int index) {
	const float diago = cubeCenterDiagonal[indexClipMap - 1].w;
	const vec3 left = cubeCenterDiagonal[0].xyz - diago / 2.0;
	return ivec3(ceil(voxelGridResolution * fract(left / cubeCenterDiagonal[index].w)));
}

void main()
{
    const int fullResolution = int(voxelGridResolution) + 2;
	
	ivec3 dstCoord = left(indexClipMap) + ivec3(gl_GlobalInvocationID);
    ivec3 srcCoord = dstCoord * 2;

    dstCoord = dstCoord % int(voxelGridResolution); // [0, voxelGridResolution - 1]
    srcCoord = srcCoord % int(voxelGridResolution); // [0, voxelGridResolution - 2]

    dstCoord += ivec3(1);
    srcCoord += ivec3(1);

    dstCoord.y += indexClipMap * fullResolution;
    srcCoord.y += (indexClipMap - 1) * fullResolution;
	
	ivec3 piecewiseDistance = abs(ivec3(2 * gl_GlobalInvocationID - voxelGridResolution / 2));
	#define p piecewiseDistance
	float lerp = 0.0;
	float v = max(max(p.x, p.y), p.z);
	float halfHalf = float(voxelGridResolution / 4);
	if(v > halfHalf)
		lerp = (v - halfHalf) / halfHalf;
	
	#undef p
    for(int i = 0; i < 3; ++i) {
        const float downsampledValue = computeDownSampledValue(srcCoord, i);
		const float voxelizedValue = texelFetch(src, dstCoord, 0).x;
		
        imageStore(dst, dstCoord, mix(vec4(downsampledValue), vec4(voxelizedValue), lerp));
        srcCoord += ivec3(fullResolution, 0, 0);
        dstCoord += ivec3(fullResolution, 0, 0);
    }
}